Index: src/main/java/org/example/autobot/AutobotApplication.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example.autobot;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.boot.context.properties.ConfigurationPropertiesScan;\nimport org.springframework.scheduling.annotation.EnableAsync;\n\n@SpringBootApplication\n@ConfigurationPropertiesScan\n@EnableAsync\npublic class AutobotApplication {\n    public static void main(String[] args) {\n        SpringApplication.run(AutobotApplication.class, args);\n    }\n\n}\n
===================================================================
diff --git a/src/main/java/org/example/autobot/AutobotApplication.java b/src/main/java/org/example/autobot/AutobotApplication.java
--- a/src/main/java/org/example/autobot/AutobotApplication.java	(revision 1b74a31ad094da45e948f0bc291d2833fc13b72d)
+++ b/src/main/java/org/example/autobot/AutobotApplication.java	(date 1751682683852)
@@ -2,15 +2,10 @@
 
 import org.springframework.boot.SpringApplication;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
-import org.springframework.boot.context.properties.ConfigurationPropertiesScan;
-import org.springframework.scheduling.annotation.EnableAsync;
 
 @SpringBootApplication
-@ConfigurationPropertiesScan
-@EnableAsync
 public class AutobotApplication {
     public static void main(String[] args) {
         SpringApplication.run(AutobotApplication.class, args);
     }
-
 }
Index: build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>plugins {\n    id 'java'\n    id 'application'\n    id 'org.springframework.boot' version '3.2.5'\n    id 'io.spring.dependency-management' version '1.1.4'\n}\n\ngroup = 'org.example'\nversion = '1.0'\n\nrepositories {\n    mavenCentral()\n}\n\ndependencies {\n    implementation 'org.springframework.boot:spring-boot-starter'\n    implementation 'org.springframework.boot:spring-boot-starter-web'\n    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'\n    implementation 'org.springframework.boot:spring-boot-starter-webflux'\n    implementation 'org.springframework.kafka:spring-kafka'\n    implementation 'com.google.code.gson:gson:2.10.1'\n    implementation 'org.telegram:telegrambots:6.5.0'\n    implementation 'org.springframework:spring-context:6.1.4'\n\n    implementation 'jakarta.xml.bind:jakarta.xml.bind-api:4.0.0'\n    runtimeOnly   'org.glassfish.jaxb:jaxb-runtime:4.0.2'\n    implementation 'javax.xml.bind:jaxb-api:2.3.1'\n    runtimeOnly   'org.glassfish.jaxb:jaxb-runtime:2.3.1'\n\n    runtimeOnly 'org.postgresql:postgresql'\n\n    testImplementation 'org.springframework.boot:spring-boot-starter-test'\n    testImplementation 'org.junit.jupiter:junit-jupiter-params'\n    testImplementation 'org.mockito:mockito-core'\n    testImplementation 'com.squareup.okhttp3:mockwebserver:4.12.0'\n\n\n    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'\n}\n\n\njava {\n    toolchain {\n        languageVersion = JavaLanguageVersion.of(21)\n    }\n}\n\napplication {\n    mainClass = 'org.example.autobot.AutobotApplication'\n}\n\n\n
===================================================================
diff --git a/build.gradle b/build.gradle
--- a/build.gradle	(revision 1b74a31ad094da45e948f0bc291d2833fc13b72d)
+++ b/build.gradle	(date 1751683773692)
@@ -15,24 +15,19 @@
 dependencies {
     implementation 'org.springframework.boot:spring-boot-starter'
     implementation 'org.springframework.boot:spring-boot-starter-web'
-    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
     implementation 'org.springframework.boot:spring-boot-starter-webflux'
     implementation 'org.springframework.kafka:spring-kafka'
     implementation 'com.google.code.gson:gson:2.10.1'
     implementation 'org.telegram:telegrambots:6.5.0'
     implementation 'org.springframework:spring-context:6.1.4'
-
+    implementation 'io.projectreactor:reactor-core:3.6.6'
     implementation 'jakarta.xml.bind:jakarta.xml.bind-api:4.0.0'
     runtimeOnly   'org.glassfish.jaxb:jaxb-runtime:4.0.2'
     implementation 'javax.xml.bind:jaxb-api:2.3.1'
     runtimeOnly   'org.glassfish.jaxb:jaxb-runtime:2.3.1'
 
-    runtimeOnly 'org.postgresql:postgresql'
-
     testImplementation 'org.springframework.boot:spring-boot-starter-test'
-    testImplementation 'org.junit.jupiter:junit-jupiter-params'
-    testImplementation 'org.mockito:mockito-core'
-    testImplementation 'com.squareup.okhttp3:mockwebserver:4.12.0'
+    testImplementation 'io.projectreactor:reactor-test'
 
 
     annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
Index: src/main/resources/application.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># ????????? Kafka-????????????????, ???? ?????? ?? ?????\nspring.autoconfigure.exclude=org.springframework.boot.autoconfigure.kafka.KafkaAutoConfiguration\n\n# ????????-???\ntelegram.bot.token=1885942942:AAGzEmy7tdiA8fl-YxwaU_PEIPk3rbMSHK0\ntelegram.bot.username=@clever8_bot\n\n# hh.ru OAuth\nhh.oauth.client-id=GA10NMCB7FSPTHJ166ERNI1BA5FQKSQD9KDOJR4HVBSAEND01B08CFNU7KINTJJM\nhh.oauth.client-secret=GQ6PFB2AHRJ2L9MSQB7IJ47F79KJEVA859GOSB1AV3EA2IROAALFA7LTKK4RDQDO\nhh.oauth.redirect-uri=http://localhost:8081/callback\n\n# ???? ???????\nserver.port=${SERVER_PORT:8081}\n\n# ?????? (???? ???????? Kafka)\ntelegram.update.topic=telegram-updates\ntelegram.commands.topic=telegram-commands\n\n# Postgres\nspring.datasource.url=${SPRING_DATASOURCE_URL:jdbc:postgresql://localhost:5432/bot_db}\nspring.datasource.username=${SPRING_DATASOURCE_USERNAME:mybot_user}\nspring.datasource.password=${SPRING_DATASOURCE_PASSWORD:12345678}\n\n\nspring.jpa.hibernate.ddl-auto=${SPRING_JPA_HIBERNATE_DDL_AUTO}\nspring.jpa.show-sql=${SPRING_JPA_SHOW_SQL:true}\n\n\n\n#TELEGRAM_BOT_TOKEN=1885942942:AAGzEmy7tdiA8fl-YxwaU_PEIPk3rbMSHK0\n#TELEGRAM_BOT_USERNAME=@clever8_bot\n#HH_OAUTH_CLIENT_ID=GA1ONMCB7FSPTHJ166ERNI1BA5FQKSQD9KDOJR4HVBSAEND01B08CFNU7KINTJJM\n#HH_OAUTH_CLIENT_SECRET=GQ6PFB2AHRJ2L9MSQB7IJ47F79KJEVA859GOSB1AV3EA2IROAALFA7LTKK4RDQDO\n#HH_OAUTH_REDIRECT_URI=http://localhost:8081/callback\n#SERVER_PORT=8081\n#SPRING_DATASOURCE_URL=jdbc:postgresql://localhost:5432/bot_db\n#SPRING_DATASOURCE_USERNAME=mybot_user\n#SPRING_DATASOURCE_PASSWORD=12345678\n#SPRING_JPA_HIBERNATE_DDL_AUTO=update\n#SPRING_JPA_SHOW_SQL=true
===================================================================
diff --git a/src/main/resources/application.properties b/src/main/resources/application.properties
--- a/src/main/resources/application.properties	(revision 1b74a31ad094da45e948f0bc291d2833fc13b72d)
+++ b/src/main/resources/application.properties	(date 1751682352661)
@@ -1,30 +1,16 @@
-# ????????? Kafka-????????????????, ???? ?????? ?? ?????
-spring.autoconfigure.exclude=org.springframework.boot.autoconfigure.kafka.KafkaAutoConfiguration
 
-# ????????-???
+# Telegram
 telegram.bot.token=1885942942:AAGzEmy7tdiA8fl-YxwaU_PEIPk3rbMSHK0
 telegram.bot.username=@clever8_bot
 
 # hh.ru OAuth
 hh.oauth.client-id=GA10NMCB7FSPTHJ166ERNI1BA5FQKSQD9KDOJR4HVBSAEND01B08CFNU7KINTJJM
-hh.oauth.client-secret=GQ6PFB2AHRJ2L9MSQB7IJ47F79KJEVA859GOSB1AV3EA2IROAALFA7LTKK4RDQDO
-hh.oauth.redirect-uri=http://localhost:8081/callback
-
-# ???? ???????
-server.port=${SERVER_PORT:8081}
+hh.oauth.client-secret=GQ6PFB2AHRJ2L9MSQB7IJ47F79KJEVA859GOSB1AV3EA2IR0AALFA7LTKK4RDQDO
+hh.oauth.redirect-uri=http://127.0.0.1:8081/callback
 
-# ?????? (???? ???????? Kafka)
-telegram.update.topic=telegram-updates
-telegram.commands.topic=telegram-commands
+# Server
+server.port=8081
 
-# Postgres
-spring.datasource.url=${SPRING_DATASOURCE_URL:jdbc:postgresql://localhost:5432/bot_db}
-spring.datasource.username=${SPRING_DATASOURCE_USERNAME:mybot_user}
-spring.datasource.password=${SPRING_DATASOURCE_PASSWORD:12345678}
-
-
-spring.jpa.hibernate.ddl-auto=${SPRING_JPA_HIBERNATE_DDL_AUTO}
-spring.jpa.show-sql=${SPRING_JPA_SHOW_SQL:true}
 
 
 
Index: src/main/java/org/example/autobot/web/HhAuthController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example.autobot.web;\n\nimport org.example.autobot.service.HhAuthService;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.ExceptionHandler;\nimport org.springframework.web.bind.annotation.RestController;\nimport org.springframework.web.server.MissingRequestValueException;\nimport reactor.core.publisher.Mono;\n\n@RestController\npublic class HhAuthController {\n    private final HhAuthService hhAuthService;\n    private static final String SUCCESS = \"Профиль успешно привязан\";\n    private static final String FAIL = \"Не удалось привязать профиль\";\n\n    public HhAuthController(HhAuthService hhAuthService) {\n        this.hhAuthService = hhAuthService;\n    }\n\n    @GetMapping(\"/callback\")\n    public Mono<ResponseEntity<String>> callback(@RequestParam(name = \"code\", required = true) String code,\n                                                 @RequestParam(name = \"state\", required = true) long chatId) {\n        return hhAuthService.handleCallback(code, chatId)\n                .map(msg -> {\n                    if (SUCCESS.equals(msg)) {\n                        return ResponseEntity.ok(msg);\n                    }\n                    if (FAIL.equals(msg)) {\n                        return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)\n                                .body(\"Ошибка привязки профиля\");\n                    }\n                    return ResponseEntity.ok(msg);\n                })\n                .onErrorResume(e -> Mono.just(ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)\n                        .body(\"Ошибка привязки профиля\")));\n    }\n\n    @ExceptionHandler(MissingRequestValueException.class)\n    public Mono<ResponseEntity<String>> handleMissing(MissingRequestValueException ex) {\n        return Mono.just(ResponseEntity.badRequest()\n                .body(\"Отсутствует обязательный параметр: \" + ex.getName()));\n    }\n}
===================================================================
diff --git a/src/main/java/org/example/autobot/web/HhAuthController.java b/src/main/java/org/example/autobot/web/HhAuthController.java
--- a/src/main/java/org/example/autobot/web/HhAuthController.java	(revision 1b74a31ad094da45e948f0bc291d2833fc13b72d)
+++ b/src/main/java/org/example/autobot/web/HhAuthController.java	(date 1751682778733)
@@ -1,46 +1,36 @@
 package org.example.autobot.web;
 
 import org.example.autobot.service.HhAuthService;
-import org.springframework.http.HttpStatus;
-import org.springframework.http.ResponseEntity;
 import org.springframework.web.bind.annotation.GetMapping;
 import org.springframework.web.bind.annotation.RequestParam;
-import org.springframework.web.bind.annotation.ExceptionHandler;
 import org.springframework.web.bind.annotation.RestController;
-import org.springframework.web.server.MissingRequestValueException;
 import reactor.core.publisher.Mono;
 
 @RestController
 public class HhAuthController {
-    private final HhAuthService hhAuthService;
-    private static final String SUCCESS = "Профиль успешно привязан";
-    private static final String FAIL = "Не удалось привязать профиль";
+    private final HhAuthService authService;
 
-    public HhAuthController(HhAuthService hhAuthService) {
-        this.hhAuthService = hhAuthService;
+    public HhAuthController(HhAuthService authService) {
+        this.authService = authService;
+    }
+
+    @GetMapping("/auth-url")
+    public String getAuthUrl(@RequestParam long chatId) {
+        return authService.buildAuthUrl(chatId);
     }
 
     @GetMapping("/callback")
-    public Mono<ResponseEntity<String>> callback(@RequestParam(name = "code", required = true) String code,
-                                                 @RequestParam(name = "state", required = true) long chatId) {
-        return hhAuthService.handleCallback(code, chatId)
-                .map(msg -> {
-                    if (SUCCESS.equals(msg)) {
-                        return ResponseEntity.ok(msg);
-                    }
-                    if (FAIL.equals(msg)) {
-                        return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
-                                .body("Ошибка привязки профиля");
-                    }
-                    return ResponseEntity.ok(msg);
-                })
-                .onErrorResume(e -> Mono.just(ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
-                        .body("Ошибка привязки профиля")));
+    public Mono<String> handleCallback(
+            @RequestParam String code,
+            @RequestParam long state) {
+
+        return authService.exchangeCodeForToken(code)
+                .map(response -> "Auth success: " + response)
+                .onErrorResume(e -> Mono.just("Auth failed: " + e.getMessage()));
     }
 
-    @ExceptionHandler(MissingRequestValueException.class)
-    public Mono<ResponseEntity<String>> handleMissing(MissingRequestValueException ex) {
-        return Mono.just(ResponseEntity.badRequest()
-                .body("Отсутствует обязательный параметр: " + ex.getName()));
+    @GetMapping("/test")
+    public String test() {
+        return "Service is running!";
     }
 }
\ No newline at end of file
Index: src/main/java/org/example/autobot/TelegramVacancyBot.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example.autobot;\n\nimport org.example.autobot.command.CommandHandler;\nimport org.example.autobot.kafka.KafkaUpdateProducer;\nimport org.example.autobot.config.TelegramBotProperties;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\nimport org.telegram.telegrambots.bots.TelegramLongPollingBot;\nimport org.telegram.telegrambots.meta.api.methods.send.SendMessage;\nimport org.telegram.telegrambots.meta.api.objects.Update;\n\n@Component\npublic class TelegramVacancyBot extends TelegramLongPollingBot {\n\n    private static final Logger log = LoggerFactory.getLogger(TelegramVacancyBot.class);\n\n    private final CommandHandler commandHandler;\n    private final KafkaUpdateProducer updateProducer;  // может быть null\n    private final TelegramBotProperties properties;\n\n    public TelegramVacancyBot(\n            CommandHandler commandHandler,\n            @Autowired(required = false) KafkaUpdateProducer updateProducer,\n            TelegramBotProperties properties\n    ) {\n        this.commandHandler = commandHandler;\n        this.updateProducer = updateProducer;\n        this.properties = properties;\n    }\n\n    @Override\n    public void onUpdateReceived(Update update) {\n        log.info(\"\uD83D\uDCE5 Update received: {}\", update);\n\n        // Если KafkaUpdateProducer есть — шлём update в Kafka\n        if (updateProducer != null) {\n            updateProducer.send(update);\n        }\n\n        // Обработка команды\n        commandHandler.handle(update);\n    }\n\n    @Override\n    public String getBotUsername() {\n        return properties.getUsername();\n    }\n\n    @Override\n    public String getBotToken() {\n        return properties.getToken();\n    }\n\n    /**\n     * Вспомогательный метод для отправки текстового сообщения.\n     */\n    public void sendText(long chatId, String text) {\n        SendMessage msg = SendMessage.builder()\n                .chatId(String.valueOf(chatId))\n                .text(text)\n                .build();\n        try {\n            execute(msg);\n        } catch (Exception e) {\n            log.error(\"❌ Failed to send message\", e);\n        }\n    }\n}\n
===================================================================
diff --git a/src/main/java/org/example/autobot/TelegramVacancyBot.java b/src/main/java/org/example/autobot/TelegramVacancyBot.java
--- a/src/main/java/org/example/autobot/TelegramVacancyBot.java	(revision 1b74a31ad094da45e948f0bc291d2833fc13b72d)
+++ b/src/main/java/org/example/autobot/TelegramVacancyBot.java	(date 1751683371608)
@@ -1,70 +1,61 @@
 package org.example.autobot;
 
-import org.example.autobot.command.CommandHandler;
-import org.example.autobot.kafka.KafkaUpdateProducer;
-import org.example.autobot.config.TelegramBotProperties;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-import org.springframework.beans.factory.annotation.Autowired;
+import org.example.autobot.service.HhAuthService;
+import org.springframework.beans.factory.annotation.Value;
 import org.springframework.stereotype.Component;
 import org.telegram.telegrambots.bots.TelegramLongPollingBot;
 import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
 import org.telegram.telegrambots.meta.api.objects.Update;
+import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
 
 @Component
 public class TelegramVacancyBot extends TelegramLongPollingBot {
-
-    private static final Logger log = LoggerFactory.getLogger(TelegramVacancyBot.class);
-
-    private final CommandHandler commandHandler;
-    private final KafkaUpdateProducer updateProducer;  // может быть null
-    private final TelegramBotProperties properties;
+    private final String botToken;
+    private final String botUsername;
+    private final HhAuthService authService;
 
     public TelegramVacancyBot(
-            CommandHandler commandHandler,
-            @Autowired(required = false) KafkaUpdateProducer updateProducer,
-            TelegramBotProperties properties
-    ) {
-        this.commandHandler = commandHandler;
-        this.updateProducer = updateProducer;
-        this.properties = properties;
-    }
-
-    @Override
-    public void onUpdateReceived(Update update) {
-        log.info("📥 Update received: {}", update);
+            @Value("${telegram.bot.token}") String botToken,
+            @Value("${telegram.bot.username}") String botUsername,
+            HhAuthService authService) {
 
-        // Если KafkaUpdateProducer есть — шлём update в Kafka
-        if (updateProducer != null) {
-            updateProducer.send(update);
-        }
-
-        // Обработка команды
-        commandHandler.handle(update);
+        super(botToken);
+        this.botToken = botToken;
+        this.botUsername = botUsername;
+        this.authService = authService;
     }
 
     @Override
     public String getBotUsername() {
-        return properties.getUsername();
+        return botUsername;
     }
 
     @Override
-    public String getBotToken() {
-        return properties.getToken();
+    public void onUpdateReceived(Update update) {
+        if (update.hasMessage() && update.getMessage().hasText()) {
+            long chatId = update.getMessage().getChatId();
+            String messageText = update.getMessage().getText();
+
+            if ("/start".equals(messageText)) {
+                sendMessage(chatId, "Привет! Я бот для авторизации на HH.ru. Используй /auth для начала.");
+            } else if ("/auth".equals(messageText)) {
+                String authUrl = authService.buildAuthUrl(chatId);
+                String response = "Перейди по ссылке для авторизации:\n" + authUrl;
+                sendMessage(chatId, response);
+            } else {
+                sendMessage(chatId, "Неизвестная команда. Используй /auth для авторизации.");
+            }
+        }
     }
 
-    /**
-     * Вспомогательный метод для отправки текстового сообщения.
-     */
-    public void sendText(long chatId, String text) {
-        SendMessage msg = SendMessage.builder()
-                .chatId(String.valueOf(chatId))
-                .text(text)
-                .build();
+    private void sendMessage(long chatId, String text) {
+        SendMessage message = new SendMessage();
+        message.setChatId(String.valueOf(chatId));
+        message.setText(text);
         try {
-            execute(msg);
-        } catch (Exception e) {
-            log.error("❌ Failed to send message", e);
+            execute(message);
+        } catch (TelegramApiException e) {
+            e.printStackTrace();
         }
     }
-}
+}
\ No newline at end of file
Index: src/main/java/org/example/autobot/service/HhAuthService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example.autobot.service;\n\nimport org.example.autobot.model.HhProfile;\nimport org.example.autobot.repository.HhProfileRepository;\nimport org.example.autobot.config.HhOAuthProperties;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.http.MediaType;\nimport org.springframework.stereotype.Service;\nimport org.springframework.web.reactive.function.BodyInserters;\nimport org.springframework.web.reactive.function.client.WebClient;\nimport org.springframework.web.util.UriComponentsBuilder;\nimport reactor.core.publisher.Mono;\nimport com.fasterxml.jackson.annotation.JsonProperty;\n\n@Service\npublic class HhAuthService {\n    private static final Logger log = LoggerFactory.getLogger(HhAuthService.class);\n\n    private final HhOAuthProperties props;\n    private final HhProfileRepository repo;\n    private final WebClient client;\n    private final String baseUrl;\n\n    public HhAuthService(\n            HhProfileRepository repo,\n            WebClient.Builder builder,\n            HhOAuthProperties props,\n            @Value(\"${hh.base-url:https://hh.ru}\") String baseUrl\n    ) {\n        this.repo = repo;\n        this.props = props;\n        this.client = builder.baseUrl(baseUrl).build();\n        this.baseUrl = baseUrl;\n    }\n\n    /**\n     * Собирает URL для начала OAuth-потока.\n     */\n    public String buildAuthUrl(long chatId) {\n        String authorizeBase = baseUrl + \"/oauth/authorize\";\n        return UriComponentsBuilder\n                .fromHttpUrl(authorizeBase)\n                .queryParam(\"response_type\", \"code\")\n                .queryParam(\"client_id\", props.getClientId())\n                .queryParam(\"state\", chatId)\n                .queryParam(\"redirect_uri\", props.getRedirectUri())\n                .encode()\n                .toUriString();\n    }\n\n    /**\n     * Обменивает code→токены, сохраняет профиль и возвращает сообщение.\n     */\n    public Mono<String> handleCallback(String code, long chatId) {\n        return client.post()\n                .uri(\"/oauth/token\")\n                .contentType(MediaType.APPLICATION_FORM_URLENCODED)\n                .body(BodyInserters.fromFormData(\"grant_type\", \"authorization_code\")\n                        .with(\"client_id\", props.getClientId())\n                        .with(\"client_secret\", props.getClientSecret())\n                        .with(\"code\", code)\n                        .with(\"redirect_uri\", props.getRedirectUri()))\n                .retrieve()\n                .bodyToMono(TokenResponse.class)\n                .map(tr -> {\n                    repo.save(new HhProfile(chatId, tr.accessToken(), tr.refreshToken()));\n                    log.info(\"Профиль {} сохранён с access_token={}\", chatId, tr.accessToken());\n                    return \"Профиль успешно привязан\";\n                })\n                .onErrorResume(e -> {\n                    log.error(\"Ошибка привязки профиля {}\", chatId, e);\n                    return Mono.just(\"Не удалось привязать профиль\");\n                });\n    }\n\n    private static record TokenResponse(\n            @JsonProperty(\"access_token\") String accessToken,\n            @JsonProperty(\"refresh_token\") String refreshToken\n    ) {}\n}\n
===================================================================
diff --git a/src/main/java/org/example/autobot/service/HhAuthService.java b/src/main/java/org/example/autobot/service/HhAuthService.java
--- a/src/main/java/org/example/autobot/service/HhAuthService.java	(revision 1b74a31ad094da45e948f0bc291d2833fc13b72d)
+++ b/src/main/java/org/example/autobot/service/HhAuthService.java	(date 1751682745259)
@@ -1,82 +1,57 @@
 package org.example.autobot.service;
 
-import org.example.autobot.model.HhProfile;
-import org.example.autobot.repository.HhProfileRepository;
-import org.example.autobot.config.HhOAuthProperties;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
 import org.springframework.beans.factory.annotation.Value;
 import org.springframework.http.MediaType;
 import org.springframework.stereotype.Service;
-import org.springframework.web.reactive.function.BodyInserters;
 import org.springframework.web.reactive.function.client.WebClient;
-import org.springframework.web.util.UriComponentsBuilder;
 import reactor.core.publisher.Mono;
-import com.fasterxml.jackson.annotation.JsonProperty;
+import java.net.URLEncoder;
+import java.nio.charset.StandardCharsets;
+import java.util.Base64;
 
 @Service
 public class HhAuthService {
-    private static final Logger log = LoggerFactory.getLogger(HhAuthService.class);
-
-    private final HhOAuthProperties props;
-    private final HhProfileRepository repo;
-    private final WebClient client;
-    private final String baseUrl;
+    private final String clientId;
+    private final String clientSecret;
+    private final String redirectUri;
+    private final WebClient webClient;
 
     public HhAuthService(
-            HhProfileRepository repo,
-            WebClient.Builder builder,
-            HhOAuthProperties props,
-            @Value("${hh.base-url:https://hh.ru}") String baseUrl
-    ) {
-        this.repo = repo;
-        this.props = props;
-        this.client = builder.baseUrl(baseUrl).build();
-        this.baseUrl = baseUrl;
+            @Value("${hh.oauth.client-id}") String clientId,
+            @Value("${hh.oauth.client-secret}") String clientSecret,
+            @Value("${hh.oauth.redirect-uri}") String redirectUri) {
+
+        this.clientId = clientId;
+        this.clientSecret = clientSecret;
+        this.redirectUri = redirectUri;
+        this.webClient = WebClient.create("https://hh.ru");
     }
 
-    /**
-     * Собирает URL для начала OAuth-потока.
-     */
     public String buildAuthUrl(long chatId) {
-        String authorizeBase = baseUrl + "/oauth/authorize";
-        return UriComponentsBuilder
-                .fromHttpUrl(authorizeBase)
-                .queryParam("response_type", "code")
-                .queryParam("client_id", props.getClientId())
-                .queryParam("state", chatId)
-                .queryParam("redirect_uri", props.getRedirectUri())
-                .encode()
-                .toUriString();
+        String encodedRedirectUri = URLEncoder.encode(redirectUri, StandardCharsets.UTF_8);
+        return String.format(
+                "https://hh.ru/oauth/authorize?response_type=code&client_id=%s&state=%d&redirect_uri=%s",
+                clientId,
+                chatId,
+                encodedRedirectUri
+        );
     }
 
-    /**
-     * Обменивает code→токены, сохраняет профиль и возвращает сообщение.
-     */
-    public Mono<String> handleCallback(String code, long chatId) {
-        return client.post()
+    public Mono<String> exchangeCodeForToken(String code) {
+        String credentials = clientId + ":" + clientSecret;
+        String base64Credentials = Base64.getEncoder()
+                .encodeToString(credentials.getBytes(StandardCharsets.UTF_8));
+
+        return webClient.post()
                 .uri("/oauth/token")
+                .header("Authorization", "Basic " + base64Credentials)
                 .contentType(MediaType.APPLICATION_FORM_URLENCODED)
-                .body(BodyInserters.fromFormData("grant_type", "authorization_code")
-                        .with("client_id", props.getClientId())
-                        .with("client_secret", props.getClientSecret())
-                        .with("code", code)
-                        .with("redirect_uri", props.getRedirectUri()))
+                .bodyValue(String.format(
+                        "grant_type=authorization_code&code=%s&redirect_uri=%s&client_id=%s",
+                        code,
+                        redirectUri,
+                        clientId))
                 .retrieve()
-                .bodyToMono(TokenResponse.class)
-                .map(tr -> {
-                    repo.save(new HhProfile(chatId, tr.accessToken(), tr.refreshToken()));
-                    log.info("Профиль {} сохранён с access_token={}", chatId, tr.accessToken());
-                    return "Профиль успешно привязан";
-                })
-                .onErrorResume(e -> {
-                    log.error("Ошибка привязки профиля {}", chatId, e);
-                    return Mono.just("Не удалось привязать профиль");
-                });
+                .bodyToMono(String.class);
     }
-
-    private static record TokenResponse(
-            @JsonProperty("access_token") String accessToken,
-            @JsonProperty("refresh_token") String refreshToken
-    ) {}
-}
+}
\ No newline at end of file
