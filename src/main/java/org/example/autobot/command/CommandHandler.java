package org.example.autobot.command;

import org.example.autobot.service.HhAuthService;
import org.example.autobot.service.HhFetcher;
import org.example.autobot.service.HhResumeService;
import org.example.autobot.TelegramSender;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.scheduling.annotation.Async;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.meta.api.objects.Update;

@Component
public class CommandHandler {
    private static final Logger log = LoggerFactory.getLogger(CommandHandler.class);

    private final TelegramSender sender;
    private final HhAuthService hhAuthService;
    private final HhResumeService hhResumeService;
    private final HhFetcher hhFetcher;

    public CommandHandler(
            TelegramSender sender,
            HhAuthService hhAuthService,
            HhResumeService hhResumeService,
            HhFetcher hhFetcher
    ) {
        this.sender          = sender;
        this.hhAuthService   = hhAuthService;
        this.hhResumeService = hhResumeService;
        this.hhFetcher       = hhFetcher;
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ (update) –∏–∑ Telegram.
     * –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ (@Async), —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å polling.
     */
    @Async
    public void handle(Update update) {
        if (update == null
                || !update.hasMessage()
                || !update.getMessage().hasText()
        ) {
            return; // –Ω–∏—á–µ–≥–æ –Ω–µ—Ç ‚Äî –≤—ã—Ö–æ–¥–∏–º
        }

        String text   = update.getMessage().getText().trim();
        long   chatId = update.getMessage().getChatId();

        // –∫–æ–º–∞–Ω–¥–∞ ‚Äî —ç—Ç–æ –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ (–¥–æ –ø—Ä–æ–±–µ–ª–∞)
        String command = text.split("\\s+")[0].toLowerCase();

        try {
            switch (command) {
                case "/start":
                    sender.sendText(
                            chatId,
                            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –æ—Ç–∫–ª–∏–∫–æ–≤ –Ω–∞ hh.ru.\n" +
                                    "‚Ä¢ /vacancies ‚Äî –ø–æ–∏—Å–∫ —Å–≤–µ–∂–∏—Ö –≤–∞–∫–∞–Ω—Å–∏–π\n" +
                                    "‚Ä¢ /linkhh ‚Äî –ø—Ä–∏–≤—è–∑–∞—Ç—å –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å hh.ru\n" +
                                    "‚Ä¢ /getresume ‚Äî –ø–æ–ª—É—á–∏—Ç—å –≤–∞—à–µ —Ä–µ–∑—é–º–µ –∏–∑ hh.ru\n" +
                                    "‚Ä¢ /help ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥"
                    );
                    break;

                case "/help":
                    sender.sendText(
                            chatId,
                            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n" +
                                    "/start     ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n" +
                                    "/vacancies ‚Äî –ø–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π –ø–æ –≤–∞—à–∏–º –∫–ª—é—á–∞–º\n" +
                                    "/linkhh    ‚Äî –ø—Ä–∏–≤—è–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å hh.ru (OAuth)\n" +
                                    "/getresume ‚Äî –ø–æ–ª—É—á–∏—Ç—å JSON –≤–∞—à–µ–≥–æ —Ä–µ–∑—é–º–µ\n" +
                                    "/help      ‚Äî —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞"
                    );
                    break;

                case "/vacancies":
                    // hhFetcher.fetchAndFormatVacancies() –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç String
                    String vacancies = hhFetcher.fetchAndFormatVacancies();
                    sender.sendText(chatId, vacancies);
                    break;

                case "/linkhh":
                    // –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º URL OAuth –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    String url = hhAuthService.buildAuthUrl(chatId);
                    sender.sendText(
                            chatId,
                            "üîó –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –∏ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –Ω–∞ hh.ru:\n" + url
                    );
                    break;

                case "/getresume":
                    // –ø—ã—Ç–∞–µ–º—Å—è –¥–æ—Å—Ç–∞—Ç—å —Ä–µ–∑—é–º–µ, –±–ª–æ–∫–∏—Ä—É–µ–º—Å—è –≤–Ω—É—Ç—Ä–∏ @Async —á—Ç–æ–±—ã –Ω–µ –º–µ—à–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–º—É –ø–æ—Ç–æ–∫—É
                    try {
                        String resumeJson = hhResumeService
                                .fetchMyResume(chatId)
                                .block(); // –±–ª–æ–∫ –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è Mono
                        sender.sendText(chatId, "üìÑ –í–∞—à–µ —Ä–µ–∑—é–º–µ:\n" + resumeJson);
                    } catch (Exception e) {
                        log.warn("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—é–º–µ –¥–ª—è chatId={}", chatId, e);
                        sender.sendText(
                                chatId,
                                "‚ùå –ù–µ –º–æ–≥—É –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—é–º–µ. –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –µ—â—ë –Ω–µ –ø—Ä–∏–≤—è–∑–∞–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å: /linkhh"
                        );
                    }
                    break;

                default:
                    sender.sendText(chatId, "‚ùì –ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞. –í–≤–µ–¥–∏—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.");
                    break;
            }

        } catch (Exception ex) {
            log.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã {} –æ—Ç chatId={}", command, chatId, ex);
            sender.sendText(chatId, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
        }
    }
}
