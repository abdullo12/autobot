package org.example.autobot.kafka;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.kafka.annotation.KafkaListener;
import org.springframework.stereotype.Service;

@Service
public class KafkaCommandConsumer {

    private static final Logger log = LoggerFactory.getLogger(KafkaCommandConsumer.class);

    /**
     * –ú–µ—Ç–æ–¥ —Å–ª—É—à–∞–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ç–æ–ø–∏–∫ Kafka –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ –∫–æ–º–∞–Ω–¥—ã.
     * –ö–æ–º–∞–Ω–¥—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–µ—Ä–µ–¥–∞–Ω—ã –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä: "start", "stop", "status"
     */
    @KafkaListener(
            topics = "${telegram.commands.topic:telegram-commands}",
            groupId = "${spring.kafka.consumer.group-id}"
    )
    public void listen(String message) {
        log.info("üì• –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: {}", message);

        try {
            handleCommand(message.trim().toLowerCase());
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã '{}': {}", message, e.getMessage(), e);
        }
    }

    /**
     * –ü—Ä–æ—Å—Ç–∞—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥. –ü–æ–∑–∂–µ –º–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π CommandDispatcher.
     */
    private void handleCommand(String command) {
        switch (command) {
            case "start":
                log.info("‚ñ∂ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ –∫–æ–º–∞–Ω–¥–µ 'start'");
                break;

            case "stop":
                log.info("‚èπ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ –∫–æ–º–∞–Ω–¥–µ 'stop'");
                break;

            case "status":
                log.info("‚Ñπ –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞: –≤—Å—ë —Ä–∞–±–æ—Ç–∞–µ—Ç!");
                break;

            default:
                log.warn("‚ö† –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: '{}'", command);
        }
    }
}

